<?php
namespace Codemonkey1988\BeGoogleAuth\UserProvider;

use Codemonkey1988\BeGoogleAuth\Google\Gsuite;
use Codemonkey1988\BeGoogleAuth\Service\ConfigurationService;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Core\Utility\StringUtility;
use TYPO3\CMS\Saltedpasswords\Salt\SaltFactory;
use TYPO3\CMS\Saltedpasswords\Utility\SaltedPasswordsUtility;

class BackendUserProvider implements UserProviderInterface
{
    /**
     * @var array
     */
    protected $authenticationInformation;

    /**
     * @var Gsuite
     */
    protected $gsuite;

    /**
     * AbstractUserProvider constructor.
     *
     * @param array $authenticationInformation
     */
    public function __construct(array $authenticationInformation)
    {
        $this->authenticationInformation = $authenticationInformation;
    }

    /**
     * @param ConfigurationService $configurationService
     */
    public function injectConfigurationService(ConfigurationService $configurationService)
    {
        $this->gsuite = GeneralUtility::makeInstance(Gsuite::class);
        $this->gsuite->injectConfigurationService($configurationService);
    }

    /**
     * Creates a new user based on a configured skeleton user.
     *
     * @param string $email
     * @param string $name
     * @return void
     */
    public function createUser(string $email, string $name)
    {
        $data = [
            'username' => $email,
            'password' => $this->generatePassword(),
            'email' => $email,
            'realName' => $name,
            'tstamp' => $GLOBALS['EXEC_TIME'],
            'crdate' => $GLOBALS['EXEC_TIME'],
            'description' => 'Auto generated by google_signin plugin',
            'google_oauth' => 1,
        ];

        if ($this->gsuite->shouldCreateAdminUser()) {
            $data['admin'] = 1;
        } else {
            $data['usergroup'] = implode(',', $this->gsuite->getUserGroupUids());
        }

        GeneralUtility::makeInstance(ConnectionPool::class)
            ->getConnectionForTable('be_users')
            ->insert('be_users', $data);
    }

    /**
     * @param string $email
     * @param bool $respectEnableFields
     * @return array
     */
    public function getUserByEmail(string $email, $respectEnableFields = true): array
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);

        // Remove all restrictions - Restrictions will be set by $this->authenticationInformation['db_user']['enable_clause']
        $queryBuilder->getRestrictions()->removeAll();

        $conditions = [
            $queryBuilder->expr()->eq(
                'email',
                $queryBuilder->createNamedParameter($email, \PDO::PARAM_STR)
            ),
        ];

        if ($respectEnableFields) {
            $conditions[] = $this->authenticationInformation['db_user']['enable_clause'];
        }

        $records = $queryBuilder
            ->select('*')
            ->from($this->authenticationInformation['db_user']['table'])
            ->where(...$conditions)
            ->execute()
            ->fetchAll();

        $count = count($records);
        if ($count > 1) {
            throw new \UnexpectedValueException(sprintf('Too many records found for email address "%s".', $email), 1527920312);
        }

        return $count === 1 ? $records[0] : [];
    }

    /**
     * @param int $uid
     * @return void
     */
    public function restoreUser(int $uid)
    {
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable($this->authenticationInformation['db_user']['table']);
        $queryBuilder->update($this->authenticationInformation['db_user']['table'])
            ->set('deleted', 0)
            ->execute();
    }

    /**
     * Generates a random password.
     *
     * @return string
     */
    protected function generatePassword(): string
    {
        $password = StringUtility::getUniqueId('google_auth_password_') . mt_rand(1000000, 9999999);

        if (SaltedPasswordsUtility::isUsageEnabled()) {
            $objInstanceSaltedPW = SaltFactory::getSaltingInstance();
            $password = $objInstanceSaltedPW->getHashedPassword($password);
        }

        return $password;
    }
}
